/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Museum
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from '../lib/api-instance';
import type { BodyType } from '../lib/api-instance';
export type FileControllerUploadFileBody = {
  upload?: Blob;
};

export interface AuthDto {
  email: string;
  password: string;
}

export interface UserDto {
  email: string;
  id: string;
}

export interface AuthResponseDto {
  accessToken: string;
  user: UserDto;
}

export interface FileDto {
  url: string;
}

export interface UpdateArticleIndexDto {
  id: string;
}

export interface UpdateArticleDto { [key: string]: unknown }

export interface CreateArticleDto {
  categoryId: string;
  description: string;
  text: string;
  title: string;
}

export interface UpdateCategoryIndexDto {
  id: string;
}

export interface UpdateCategoryDto { [key: string]: unknown }

export interface ArticleDto {
  categoryId: string;
  description: string;
  id: string;
  index: number;
  text: string;
  title: string;
}

export interface CategoryDto {
  article: ArticleDto[];
  id: string;
  index: number;
  title: string;
}

export interface CreateCategoryDto {
  title: string;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const categoryControllerCreate = (
    createCategoryDto: BodyType<CreateCategoryDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CategoryDto>(
      {url: `/api/category`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCategoryDto
    },
      options);
    }
  
export const categoryControllerFindAll = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CategoryDto[]>(
      {url: `/api/category`, method: 'GET'
    },
      options);
    }
  
export const categoryControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CategoryDto>(
      {url: `/api/category/${id}`, method: 'GET'
    },
      options);
    }
  
export const categoryControllerUpdate = (
    id: string,
    updateCategoryDto: BodyType<UpdateCategoryDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CategoryDto>(
      {url: `/api/category/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateCategoryDto
    },
      options);
    }
  
export const categoryControllerRemove = (
    id: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CategoryDto>(
      {url: `/api/category/${id}`, method: 'DELETE'
    },
      options);
    }
  
export const categoryControllerUpdateIndex = (
    updateCategoryIndexDto: UpdateCategoryIndexDto[],
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/api/category/index`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCategoryIndexDto
    },
      options);
    }
  
export const articleControllerCreate = (
    createArticleDto: BodyType<CreateArticleDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<ArticleDto>(
      {url: `/api/article`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createArticleDto
    },
      options);
    }
  
export const articleControllerFindAll = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<ArticleDto[]>(
      {url: `/api/article`, method: 'GET'
    },
      options);
    }
  
export const articleControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<ArticleDto>(
      {url: `/api/article/${id}`, method: 'GET'
    },
      options);
    }
  
export const articleControllerUpdate = (
    id: string,
    updateArticleDto: BodyType<UpdateArticleDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<ArticleDto>(
      {url: `/api/article/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateArticleDto
    },
      options);
    }
  
export const articleControllerRemove = (
    id: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<ArticleDto>(
      {url: `/api/article/${id}`, method: 'DELETE'
    },
      options);
    }
  
export const articleControllerUpdateIndex = (
    updateArticleIndexDto: UpdateArticleIndexDto[],
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/api/article/index`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateArticleIndexDto
    },
      options);
    }
  
export const fileControllerGetFile = (
    filename: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/api/file/${filename}`, method: 'GET'
    },
      options);
    }
  
export const fileControllerUploadFile = (
    fileControllerUploadFileBody: BodyType<FileControllerUploadFileBody>,
 options?: SecondParameter<typeof createInstance>,) => {const formData = new FormData();
if(fileControllerUploadFileBody.upload !== undefined) {
 formData.append('upload', fileControllerUploadFileBody.upload)
 }

      return createInstance<FileDto>(
      {url: `/api/file/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const authControllerSession = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<UserDto>(
      {url: `/api/auth/session`, method: 'GET'
    },
      options);
    }
  
export const authControllerLogin = (
    authDto: BodyType<AuthDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<AuthResponseDto>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authDto
    },
      options);
    }
  
export const authControllerRegister = (
    authDto: BodyType<AuthDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<AuthResponseDto>(
      {url: `/api/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authDto
    },
      options);
    }
  
export const authControllerGetNewTokens = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<AuthResponseDto>(
      {url: `/api/auth/login/access-token`, method: 'POST'
    },
      options);
    }
  
export const authControllerLogout = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/api/auth/logout`, method: 'POST'
    },
      options);
    }
  
export type CategoryControllerCreateResult = NonNullable<Awaited<ReturnType<typeof categoryControllerCreate>>>
export type CategoryControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof categoryControllerFindAll>>>
export type CategoryControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof categoryControllerFindOne>>>
export type CategoryControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof categoryControllerUpdate>>>
export type CategoryControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof categoryControllerRemove>>>
export type CategoryControllerUpdateIndexResult = NonNullable<Awaited<ReturnType<typeof categoryControllerUpdateIndex>>>
export type ArticleControllerCreateResult = NonNullable<Awaited<ReturnType<typeof articleControllerCreate>>>
export type ArticleControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof articleControllerFindAll>>>
export type ArticleControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof articleControllerFindOne>>>
export type ArticleControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof articleControllerUpdate>>>
export type ArticleControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof articleControllerRemove>>>
export type ArticleControllerUpdateIndexResult = NonNullable<Awaited<ReturnType<typeof articleControllerUpdateIndex>>>
export type FileControllerGetFileResult = NonNullable<Awaited<ReturnType<typeof fileControllerGetFile>>>
export type FileControllerUploadFileResult = NonNullable<Awaited<ReturnType<typeof fileControllerUploadFile>>>
export type AuthControllerSessionResult = NonNullable<Awaited<ReturnType<typeof authControllerSession>>>
export type AuthControllerLoginResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
export type AuthControllerRegisterResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
export type AuthControllerGetNewTokensResult = NonNullable<Awaited<ReturnType<typeof authControllerGetNewTokens>>>
export type AuthControllerLogoutResult = NonNullable<Awaited<ReturnType<typeof authControllerLogout>>>
